name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  tag:
    name: Create Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Bump version and create tag
        id: create_tag
        run: |
          latest=${{ steps.get_tag.outputs.latest_tag }}
          IFS='.' read -r -a parts <<< "${latest#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          new_tag="v$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $new_tag
          git push origin $new_tag
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build binaries
        run: make build-all VERSION=${{ env.VERSION }} OUTPUT_DIR=build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kubensage-agent-binaries
          path: build


  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: kubensage-agent-binaries
          path: build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}