syntax = "proto3";

package metrics;

option go_package = "/proto/gen";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// PsiData represents pressure stall information for a given resource (e.g. CPU, memory, IO).
// It captures how often and how long tasks have been stalled due to resource pressure.
message PsiData {
  // Total time (in microseconds) that tasks have been stalled since boot.
  google.protobuf.UInt64Value total = 1;

  // Average percentage of time over the past 10 seconds that tasks were stalled.
  // This value is between 0.0 and 100.0.
  google.protobuf.DoubleValue avg10 = 2;

  // Average percentage of time over the past 60 seconds that tasks were stalled.
  google.protobuf.DoubleValue avg60 = 3;

  // Average percentage of time over the past 300 seconds that tasks were stalled.
  google.protobuf.DoubleValue avg300 = 4;
}

message PsiMetrics {
  // 'some' indicates the time when at least one task was stalled due to resource contention.
  // This reflects partial pressure situations where progress is still being made by other tasks.
  PsiData some = 1;

  // 'full' indicates the time when all non-idle tasks were stalled simultaneously.
  // This reflects severe contention where no useful work could be performed.
  PsiData full = 2;
}

// InterfaceStat describes the configuration and status of a network interface on the node.
message InterfaceStat {
  // The system-assigned index of the network interface.
  int32 index = 1;

  // The Maximum Transmission Unit (MTU) size in bytes.
  int32 mtu = 2;

  // The name of the network interface (e.g., "eth0", "lo").
  string name = 3;

  // The MAC address of the interface (e.g., "00:1a:2b:3c:4d:5e").
  string hardwareAddr = 4;

  // A list of operational flags associated with the interface (e.g., "up", "broadcast", "loopback").
  repeated string flags = 5;

  // A list of IP addresses assigned to the interface (both IPv4 and IPv6).
  repeated string addrs = 6;
}

// Each CpuInfo represents a single logical CPU (i.e., a thread).
// Multiple logical CPUs may share the same core and physical CPU (socket).
message CpuInfo {
  string model = 1;
  int32 cores = 2; // Number of cores on the physical CPU (repeated across entries)
  int32 mhz = 3;
  string vendor_id = 4;
  string physical_id = 5; // Physical CPU/socket identifier
  string core_id = 6;     // Core identifier within the socket
  int32 cpu = 7;          // Logical CPU ID (thread), as seen by the OS
  // Percentage usage of this logical CPU over the sampling interval (e.g., 1s).
  double usage = 8;
}

message NodeMetrics {
  string hostname = 1;
  uint64 uptime = 2;
  uint64 boot_time = 3;
  uint64 procs = 4;
  string os = 5;
  string platform = 6;
  string platform_family = 7;
  string platform_version = 8;
  string kernel_version = 9;
  string kernel_arch = 10;
  string host_id = 11;

  double total_cpu_percentage = 12;
  repeated CpuInfo cpu_infos = 13;

  uint64 total_memory = 14;
  uint64 available_memory = 15;
  uint64 used_memory = 16;
  double memory_used_perc = 17;

  // TODO Disk

  // TODO Net

  PsiMetrics psi_cpu_metrics = 18;
  PsiMetrics psi_memory_metrics = 19;
  PsiMetrics psi_io_metrics = 20;

  repeated InterfaceStat network_interfaces = 21;
}

// --- Container Metrics ---
message CpuMetrics {
  int64 timestamp = 1;
  google.protobuf.UInt64Value usage_nano_cores = 2;
  google.protobuf.UInt64Value usage_core_nano_seconds = 3;
}

message MemoryMetrics {
  int64 timestamp = 1;
  google.protobuf.UInt64Value working_set_bytes = 2;
  google.protobuf.UInt64Value available_bytes = 3;
  google.protobuf.UInt64Value usage_bytes = 4;
  google.protobuf.UInt64Value rss_bytes = 5;
  google.protobuf.UInt64Value page_faults = 6;
  google.protobuf.UInt64Value major_page_faults = 7;
}

message FileSystemMetrics {
  int64 timestamp = 1;
  string mountpoint = 2;
  google.protobuf.UInt64Value used_bytes = 3;
  google.protobuf.UInt64Value inodes_used = 4;
}

message SwapMetrics {
  int64 timestamp = 1;
  google.protobuf.UInt64Value available_bytes = 2;
  google.protobuf.UInt64Value usage_bytes = 3;
}

// --- Container (within Pod) ---
message ContainerMetrics {
  string id = 1;              // ID of the container.
  string name = 2;            // Name of the container. Same as the container name in the PodSpec.
  string image = 3;
  int64 created_at = 4;
  string state = 5;
  uint32 attempt = 6;         // Attempt number of creating the container.

  CpuMetrics cpu_metrics = 7;
  MemoryMetrics memory_metrics = 8;
  FileSystemMetrics file_system_metrics = 9;
  SwapMetrics swap_metrics = 10;
}

// --- Pod Metrics ---
message PodMetrics {
  string id = 1;
  string uid = 2;
  string name = 3;
  string namespace = 4;
  int64 created_at = 5;
  string state = 6;
  uint32 attempt = 7;

  repeated ContainerMetrics container_metrics = 8;
}

// --- Root Metrics Message ---
message Metrics {
  NodeMetrics node_metrics = 1;
  repeated PodMetrics pod_metrics = 2;
}

// --- Service Definition ---
service MetricsService {
  // In
  rpc SendMetrics(stream Metrics) returns (google.protobuf.Empty);

  // Out
  rpc SubscribeMetrics(google.protobuf.Empty) returns (stream Metrics);
}
