# K8S local nodes

# Only accessible on the local network
192.168.1.155
192.168.1.156
192.168.1.157

# Disable swap (Kubernetes requires swap to be off)
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

# Required kernel modules and sysctl settings
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

# Enable IP forwarding and bridge netfilter for IPv4 and IPv6 traffic
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo modprobe br_netfilter
sudo sysctl --system

# Install dependencies for adding external repositories and handling HTTPS packages
sudo apt update
sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release

# Install containerd (container runtime used by Kubernetes)
sudo apt install -y containerd

# Generate and apply the default containerd configuration
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml

# Restart and enable containerd to run at boot
sudo systemctl restart containerd
sudo systemctl enable containerd

# Add Kubernetes package signing key and repository
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update

# Install Kubernetes components: kubelet (node agent), kubeadm (cluster setup), kubectl (CLI)
sudo apt-get install -y kubelet kubeadm kubectl

# Prevent automatic upgrades that might cause version mismatches
sudo apt-mark hold kubelet kubeadm kubectl

# Enable and start kubelet service
sudo systemctl enable --now kubelet

# ONLY FOR MASTER NODE
# Initialize the Kubernetes control plane with a specific Pod network CIDR
sudo kubeadm init --pod-network-cidr=192.168.0.0/16

# Set up kubectl config for the current user
mkdir -p $HOME/.kube
sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Install Calico as the pod network plugin
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/calico.yaml

# Generate and display the join command for worker nodes
kubeadm token create --print-join-command

# ONLY FOR WORKER NODES
# Join the cluster using the provided token and CA certificate hash
kubeadm join 192.168.1.145:6443 --token iryd0y.ukizim5yo2h39vv5 \
	--discovery-token-ca-cert-hash sha256:b53c3a609881f232ddf1b22d0ebc1906adee6d9be7d56d6669f6ff4af5e0272d
